import { type DeferMode } from '../enums';
import { type OneToManyOptions } from './OneToMany';
import type { AnyString, EntityName } from '../typings';
export declare function OneToOne<Target, Owner>(entity?: OneToOneOptions<Owner, Target> | string | ((e: Owner) => EntityName<Target>), mappedByOrOptions?: (string & keyof Target) | ((e: Target) => any) | Partial<OneToOneOptions<Owner, Target>>, options?: Partial<OneToOneOptions<Owner, Target>>): (target: import("../typings").AnyEntity, propertyName: string) => any;
export interface OneToOneOptions<Owner, Target> extends Partial<Omit<OneToManyOptions<Owner, Target>, 'orderBy'>> {
    owner?: boolean;
    inversedBy?: (string & keyof Target) | ((e: Target) => any);
    ref?: boolean;
    primary?: boolean;
    mapToPk?: boolean;
    deleteRule?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
    updateRule?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
    deferMode?: DeferMode | `${DeferMode}`;
}
