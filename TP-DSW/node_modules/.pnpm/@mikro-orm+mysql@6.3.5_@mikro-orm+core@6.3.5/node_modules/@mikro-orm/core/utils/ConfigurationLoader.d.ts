import type { EntityManager } from '../EntityManager';
import type { EntityManagerType, IDatabaseDriver } from '../drivers';
import type { Dictionary } from '../typings';
import { Configuration, type Options } from './Configuration';
/**
 * @internal
 */
export declare class ConfigurationLoader {
    static getConfiguration<D extends IDatabaseDriver = IDatabaseDriver, EM extends D[typeof EntityManagerType] & EntityManager = EntityManager>(validate?: boolean, options?: Partial<Options>): Promise<Configuration<D, EM>>;
    static getPackageConfig(basePath?: string): Dictionary;
    static getSettings(): Settings;
    static getConfigPaths(): string[];
    static isESM(): boolean;
    static registerTsNode(configPath?: string): boolean;
    static registerDotenv<D extends IDatabaseDriver>(options?: Options<D> | Configuration<D>): void;
    static loadEnvironmentVars<D extends IDatabaseDriver>(): Partial<Options<D>>;
    static getORMPackages(): Set<string>;
    /** @internal */
    static commonJSCompat(options: Partial<Options>): void;
    static getORMPackageVersion(name: string): string | undefined;
    static checkPackageVersion(): string;
}
export interface Settings {
    alwaysAllowTs?: boolean;
    verbose?: boolean;
    useTsNode?: boolean;
    tsConfigPath?: string;
    configPaths?: string[];
}
