import type { ReferenceOptions } from './Property';
import type { EntityName, AnyEntity, FilterQuery, AnyString } from '../typings';
import { type QueryOrderMap } from '../enums';
export declare function ManyToMany<T extends object, O>(entity?: ManyToManyOptions<T, O> | string | (() => EntityName<T>), mappedBy?: (string & keyof T) | ((e: T) => any), options?: Partial<ManyToManyOptions<T, O>>): (target: AnyEntity, propertyName: string) => any;
export interface ManyToManyOptions<Owner, Target> extends ReferenceOptions<Owner, Target> {
    owner?: boolean;
    inversedBy?: (string & keyof Target) | ((e: Target) => any);
    mappedBy?: (string & keyof Target) | ((e: Target) => any);
    where?: FilterQuery<Target>;
    orderBy?: QueryOrderMap<Target> | QueryOrderMap<Target>[];
    fixedOrder?: boolean;
    fixedOrderColumn?: string;
    pivotTable?: string;
    pivotEntity?: string | (() => EntityName<any>);
    joinColumn?: string;
    joinColumns?: string[];
    inverseJoinColumn?: string;
    inverseJoinColumns?: string[];
    referenceColumnName?: string;
    referencedColumnNames?: string[];
    deleteRule?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
    updateRule?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
}
