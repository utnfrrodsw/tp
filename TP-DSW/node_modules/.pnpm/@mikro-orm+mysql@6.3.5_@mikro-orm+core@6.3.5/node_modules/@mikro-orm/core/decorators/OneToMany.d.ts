import type { ReferenceOptions } from './Property';
import { ReferenceKind, type QueryOrderMap } from '../enums';
import type { EntityName, AnyEntity, FilterQuery } from '../typings';
export declare function createOneToDecorator<Target, Owner>(entity: OneToManyOptions<Owner, Target> | string | ((e?: any) => EntityName<Target>), mappedBy: (string & keyof Target) | ((e: Target) => any) | undefined, options: Partial<OneToManyOptions<Owner, Target>>, kind: ReferenceKind): (target: AnyEntity, propertyName: string) => any;
export declare function OneToMany<Target, Owner>(entity: string | ((e?: any) => EntityName<Target>), mappedBy: (string & keyof Target) | ((e: Target) => any), options?: Partial<OneToManyOptions<Owner, Target>>): (target: AnyEntity, propertyName: string) => void;
export declare function OneToMany<Target, Owner>(options: OneToManyOptions<Owner, Target>): (target: AnyEntity, propertyName: string) => void;
export type OneToManyOptions<Owner, Target> = ReferenceOptions<Owner, Target> & {
    entity?: string | (() => EntityName<Target>);
    orphanRemoval?: boolean;
    orderBy?: QueryOrderMap<Target> | QueryOrderMap<Target>[];
    where?: FilterQuery<Target>;
    joinColumn?: string;
    joinColumns?: string[];
    inverseJoinColumn?: string;
    inverseJoinColumns?: string[];
    referenceColumnName?: string;
    mappedBy: (string & keyof Target) | ((e: Target) => any);
};
