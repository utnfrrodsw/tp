import type { ReferenceOptions } from './Property';
import { type DeferMode } from '../enums';
import type { AnyEntity, AnyString, EntityName } from '../typings';
export declare function ManyToOne<T extends object, O>(entity?: ManyToOneOptions<T, O> | string | ((e?: any) => EntityName<T>), options?: Partial<ManyToOneOptions<T, O>>): (target: AnyEntity, propertyName: string) => any;
export interface ManyToOneOptions<Owner, Target> extends ReferenceOptions<Owner, Target> {
    inversedBy?: (string & keyof Target) | ((e: Target) => any);
    ref?: boolean;
    primary?: boolean;
    mapToPk?: boolean;
    joinColumn?: string;
    joinColumns?: string[];
    referenceColumnName?: string;
    referencedColumnNames?: string[];
    deleteRule?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
    updateRule?: 'cascade' | 'no action' | 'set null' | 'set default' | AnyString;
    deferMode?: DeferMode | `${DeferMode}`;
}
