export interface Token {
    readonly type: number;
    readonly value: string;
}
export declare class Tokenizer {
    private readonly literal;
    private readonly builtIn;
    private readonly reserved;
    private readonly reservedToplevel;
    private readonly reservedNewline;
    private readonly functions;
    /** Punctuation that can be used as a boundary between other tokens */
    private readonly boundaries;
    private readonly regexBoundaries;
    private readonly regexReserved;
    private readonly regexReservedToplevel;
    private readonly regexReservedNewline;
    private readonly regexFunction;
    private readonly regexLiteral;
    private readonly regexBuiltIn;
    /**
     * Takes an SQL string and breaks it into tokens.
     */
    tokenize(string: string): Token[];
    /**
     * Return the next token and token type in an SQL string.
     * Quoted strings, comments, reserved words, whitespace, and punctuation are all their own tokens.
     */
    private createNextToken;
    /**
     * Helper function for building regular expressions for reserved words and boundary characters
     */
    private quoteRegex;
    private getQuotedString;
}
